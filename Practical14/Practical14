



###############Adapted from other students so there are similarities###############
#####This practical is difficult for me so I learnt it from other students#############




from xml.dom.minidom import parse
import xml.dom.minidom
import matplotlib.pyplot as plt
import numpy as np
import re

DOMTree = xml.dom.minidom.parse("go_obo.xml")    # Input the file
collection = DOMTree.documentElement                   # The main element
terms = collection.getElementsByTagName('term')          # Input the nodelist

isMacro={'DNA':{}, 'RNA':{}, 'protein':{}, 'oligosaccharide':{}}    #Store the names we find
idMap = {}


# Define the function to find DNA and their childNodes
def find(cur_id, Macro):
    if cur_id in isMacro[Macro]:                        # If we have found the results already then return the result
      return isMacro[Macro][cur_id]
    defstr = idMap[cur_id].getElementsByTagName('defstr')[0].childNodes[0].nodeValue  #Find defstrs and get elements from the nodelist

    if Macro in defstr:    # Find the term and flag the term we want
        isMacro[Macro][cur_id] = True
        return True
    for parent in idMap[cur_id].getElementsByTagName('is_a'):    #recursion, using the function repeatedly to find all childnodes
        if find(parent.childNodes[0].nodeValue, Macro):
            isMacro[Macro][cur_id] = True                          # use boolean to flag if exist
            break;
    if not cur_id in isMacro[Macro]:             #TO deal with ones with no child
      isMacro[Macro][cur_id] = False
    return isMacro[Macro][cur_id]

#DNAdefstr=[]
#DNAterms=[]
#for term in allterms:                                       #term is a node
    #defstr=term.getElementsByTagName('defstr')[0].childNodes[0].data
    #if 'DNA' in defstr:
        #DNAdefstr.append(defstr)
        #DNAterms.append(term)
#for term in allterms:
    #is_astr=term.getElementsByTagName('is_a')

#for item in is_astr:
    #id=item.childNodes[0].data
    #num=re.findall(':(\d.*)$',id)

#def find():
    #for i in num:
DNAlist = []
RNAlist = []
proteinlist = []
oligolist = []

for term in terms:
  idMap[term.getElementsByTagName('id')[0].childNodes[0].nodeValue] = term

for term in terms:                                                    #Use the function to find all nodes
    if find(term.getElementsByTagName('id')[0].childNodes[0].data, 'DNA'):
        DNAlist.append(term.getElementsByTagName('id')[0].childNodes[0].data)            #add the element to the dictionary
    if find(term.getElementsByTagName('id')[0].childNodes[0].data, 'RNA'):
        RNAlist.append(term.getElementsByTagName('id')[0].childNodes[0].data)
    if find(term.getElementsByTagName('id')[0].childNodes[0].data, 'protein'):
        proteinlist.append(term.getElementsByTagName('id')[0].childNodes[0].data)
    if find(term.getElementsByTagName('id')[0].childNodes[0].data, 'oligosaccharide'):
        oligolist.append(term.getElementsByTagName('id')[0].childNodes[0].data)

print('DNA child nodes: ', len(DNAlist))                                     #print the length of the dictionary to obtain the number
print('RNA child nodes: ', len(RNAlist))
print('Protein child nodes: ', len(proteinlist))
print('Oligosaccharide child nodes: ', len(oligolist))

# The Pie chart
labels = ['DNA','RNA','Protein','oligosaccharide']
sizes = [len(DNAlist),len(RNAlist),len(proteinlist),len(oligolist)]
plt.pie(sizes,explode=(0,0,0,0),labels=labels,autopct='%1.1f%%',shadow=False,startangle=150)
plt.title('The number of childNodes of macromolecules')
plt.show()
